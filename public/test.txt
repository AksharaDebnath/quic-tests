from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "postgresql://username:password@localhost/dbname"

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class Benchmarking(Base):
    __tablename__ = "benchmarking"

    id = Column(Integer, primary_key=True, index=True)
    client_id = Column(String, index=True)
    client_name = Column(String)
    client_data = Column(String)

Base.metadata.create_all(bind=engine)












from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from fastapi.responses import HTMLResponse
from database import SessionLocal, Benchmarking

app = FastAPI()

# Dependency to get the database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Define the client ID to be used
CLIENT_ID = "your_client_id"  # Set your client ID here

@app.get("/", response_class=HTMLResponse)
async def read_home(db: Session = Depends(get_db)):
    client = db.query(Benchmarking).filter(Benchmarking.client_id == CLIENT_ID).first()
    if client is None:
        return "<h1>Client not found</h1>"
    
    return f"""
    <h1>Client Information</h1>
    <p>Client ID: {client.client_id}</p>
    <p>Client Name: {client.client_name}</p>
    <p>Client Data: {client.client_data}</p>
    """

@app.post("/clients/")
def create_client(client: Benchmarking, db: Session = Depends(get_db)):
    db.add(client)
    db.commit()
    db.refresh(client)
    return client
